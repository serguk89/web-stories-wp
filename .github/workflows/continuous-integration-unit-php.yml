name: PHP Unit Tests

on:
  push:
    branches:
      - main
      - release/*
  pull_request:

jobs:
  unit-php:
    name: 'PHP ${{ matrix.php }} - WP ${{ matrix.wp }}'
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental == true }}
    strategy:
      matrix:
        php: ['7.0', '5.6']
        wp: ['latest']
        coverage: [false]
        include:
          - php: '7.4'
            wp: 'latest'
            coverage: true

          - php: '5.6'
            wp: '5.3'
# Disabled until 8.0 Docker image is available.
#
#          - php: '8.0'
#            wp: 'latest'

          - php: '7.4'
            wp: 'trunk'
            experimental: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      # TODO: Only install @wordpress/env
      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      # PHP-Scoper only works on PHP 7.2+ and we need to prefix our dependencies to accurately test them.
      # So we temporarily switch PHP versions, do a full install and then remove the package.
      # Then switch back to the PHP version we want to test and delete the vendor directory.

      - name: Setup PHP 7.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          tools: composer:v1, cs2pr

        # TODO: Use `npm run wp-env run composer` once using Composer 2.
      - name: Install prefixed dependencies
        run: composer install --prefer-dist --no-suggest --no-progress --no-interaction

      - name: Configure WordPress version
        run: |
          if [[ $WP_VERSION != 'latest' ]]; then
            echo "{\"core\":\"WordPress/WordPress#${WP_VERSION:-master}\"}" >> .wp-env.override.json
            composer require --prefer-dist --no-suggest --no-progress --no-interaction --no-update --dev wp-phpunit/wp-phpunit:${WP_VERSION:-master}
          fi
        env:
          WP_VERSION: ${{ matrix.wp }}

      - name: Start Docker environment
        run: npm run env:start
        env:
          WP_ENV_PHP_VERSION: ${{ matrix.php }}

      - name: Enable Xdebug
        run: npm run wp-env start -- --update --xdebug
        if: ${{ matrix.coverage }}

      # 1. Installs PHPUnit 7.5 and patches it to run on PHP 8.
      # 2. Dumps autoloader so mcaskill/composer-plugin-exclude-files is triggered.
      - name: Update PHPUnit
        run: |
          composer require --dev --ignore-platform-reqs --no-interaction --no-scripts --update-with-all-dependencies phpunit/phpunit:^7.5
          git apply patches/composer.patch
          composer dump-autoload --no-interaction
        if: ${{ matrix.php == '8.0' }}

      - name: Run tests
        run: |
          npm run test:php -- --coverage-clover build/logs/php-coverage.xml
          npm run test:php -- --coverage-clover build/logs/php-coverage-multisite.xml -c phpunit-multisite.xml.dist

      - name: Upload code coverage report
        uses: codecov/codecov-action@v1
        with:
          file: build/logs/*.xml
        if: ${{ matrix.coverage }}
